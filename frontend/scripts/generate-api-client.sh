#!/bin/bash
# Frontend API Client Generator
# This script generates the TypeScript client from backend OpenAPI/AsyncAPI specifications.
# The specifications are generated offline (without running the server).
#
# Usage:
#   ./scripts/generate-api-client.sh                    # Use default settings
#   TRADER_API_BASE_PATH="" ./scripts/generate-api-client.sh                 # Empty basePath (relative URLs)
#   TRADER_API_BASE_PATH="/api" ./scripts/generate-api-client.sh             # Custom basePath
#
# Environment Variables:
#   TRADER_API_BASE_PATH - BasePath for generated client (default: auto-detected from OpenAPI spec)

set -e

# Configuration
OUTPUT_DIR="./src/clients/trader-client-generated"
WS_TYPES_OUTPUT_DIR="./src/clients/ws-types-generated"
BACKEND_DIR="../backend"
OPENAPI_SPEC="$BACKEND_DIR/openapi.json"
ASYNCAPI_SPEC="$BACKEND_DIR/asyncapi.json"
CLIENT_PACKAGE_NAME="@trading-api/client"
BASE_PATH="${TRADER_API_BASE_PATH:-}"  # Use same env var as frontend
SKIP_SPEC_GENERATION="${SKIP_SPEC_GENERATION:-false}"  # Skip backend spec regeneration if true

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}🚀 Frontend API Client Generator${NC}"
echo ""

# Clean up previous generated clients
echo -e "${BLUE}🧹 Cleaning previous generated clients...${NC}"
rm -rf "$OUTPUT_DIR"
rm -rf "$WS_TYPES_OUTPUT_DIR"
mkdir -p "$OUTPUT_DIR"
mkdir -p "$WS_TYPES_OUTPUT_DIR"
echo -e "${GREEN}✅ Cleanup complete${NC}"
echo ""

# Function to export specifications from backend
export_backend_specs() {
    echo -e "${BLUE}� Generating backend API specifications (offline mode)...${NC}"
    
    if ! (cd "$BACKEND_DIR" && make export-openapi-offline > /dev/null 2>&1); then
        echo -e "${RED}❌ Failed to generate backend specifications${NC}"
        return 1
    fi
    
    # Verify files were created
    if [ ! -f "$OPENAPI_SPEC" ]; then
        echo -e "${RED}❌ OpenAPI specification not found at: $OPENAPI_SPEC${NC}"
        return 1
    fi
    
    if [ ! -f "$ASYNCAPI_SPEC" ]; then
        echo -e "${RED}❌ AsyncAPI specification not found at: $ASYNCAPI_SPEC${NC}"
        return 1
    fi
    
    echo -e "${GREEN}✅ Backend specifications generated${NC}"
    return 0
}

# Function to generate TypeScript client
generate_client() {
    echo -e "${BLUE}🔧 Generating TypeScript client...${NC}"

    # Prepare generator command
    local generator_cmd="npx @openapitools/openapi-generator-cli generate \
        -i \"$OPENAPI_SPEC\" \
        -g typescript-axios \
        -o \"$OUTPUT_DIR\" \
        -c \"./openapi-generator-config.json\" \
        --server-variables=host=,basePath="

    # Add basePath override if specified
    if [ -n "$BASE_PATH" ]; then
        echo -e "${BLUE}🔧 Using custom basePath: $BASE_PATH${NC}"
        generator_cmd="$generator_cmd --additional-properties=basePath=\"$BASE_PATH\""
    fi

    # Generate client using openapi-generator
    if eval "$generator_cmd" > /dev/null 2>&1; then
        echo -e "${GREEN}✅ Client generation successful${NC}"

        # Create index file for easy imports
        create_index_file

        return 0
    else
        echo -e "${RED}❌ Client generation failed${NC}"
        return 1
    fi
}

# Function to create index file
create_index_file() {
    cat > "$OUTPUT_DIR/index.ts" << 'EOF'
// Auto-generated API client exports
// This file is automatically generated. Do not edit manually.

// API Classes
export * from './api'

// Models/Types
export * from './models'

// Base configuration
export * from './base'
export * from './common'
export * from './configuration'

// Re-export commonly used types
export type {
  AxiosResponse,
  AxiosError,
  AxiosRequestConfig
} from 'axios'
EOF
}

# Function to generate WebSocket types
generate_ws_types() {
    echo -e "${BLUE}🔧 Generating WebSocket types from AsyncAPI...${NC}"

    if node "./scripts/generate-ws-types.mjs" "$ASYNCAPI_SPEC" "$WS_TYPES_OUTPUT_DIR"; then
        echo -e "${GREEN}✅ WebSocket types generation successful${NC}"
        return 0
    else
        echo -e "${RED}❌ WebSocket types generation failed${NC}"
        return 1
    fi
}

# Main execution
main() {
    echo ""

    local rest_client_generated=false
    local ws_types_generated=false

    # Export backend specifications offline
    if ! export_backend_specs; then
        echo ""
        echo -e "${RED}═══════════════════════════════════════════════════${NC}"
        echo -e "${RED}❌ Failed to export backend specifications${NC}"
        echo -e "${RED}═══════════════════════════════════════════════════${NC}"
        echo ""
        exit 1
    fi

    echo ""
    
    # Generate REST client from OpenAPI spec
    if [ -f "$OPENAPI_SPEC" ]; then
        echo ""
        if generate_client; then
            rest_client_generated=true
        fi
    else
        echo -e "${RED}❌ OpenAPI specification not found${NC}"
    fi

    # Generate WebSocket types from AsyncAPI spec
    echo ""
    if [ -f "$ASYNCAPI_SPEC" ]; then
        echo ""
        if generate_ws_types; then
            ws_types_generated=true
        fi
    else
        echo -e "${YELLOW}⚠️  AsyncAPI specification not found${NC}"
    fi

    # Report success
    if [ "$rest_client_generated" = true ] || [ "$ws_types_generated" = true ]; then
        echo ""
        echo -e "${GREEN}🎉 Success! Generated client(s) from API specifications${NC}"
        
        if [ "$rest_client_generated" = true ]; then
            echo -e "${GREEN}📁 REST Client: $OUTPUT_DIR${NC}"
            if [ -n "$BASE_PATH" ]; then
                echo -e "${GREEN}   - Using basePath: $BASE_PATH${NC}"
            fi
        fi
        
        if [ "$ws_types_generated" = true ]; then
            echo -e "${GREEN}📁 WebSocket Types: $WS_TYPES_OUTPUT_DIR${NC}"
            echo -e "${GREEN}   - Import: import { Bar, SubscriptionRequest, WS_OPERATIONS } from '@/clients/ws-types-generated'${NC}"
        fi
        
        echo ""
        exit 0
    fi

    echo ""
    echo -e "${RED}═══════════════════════════════════════════════════${NC}"
    echo -e "${RED}❌ Failed to generate client from API specifications${NC}"
    echo -e "${RED}═══════════════════════════════════════════════════${NC}"
    echo ""
    echo -e "${BLUE}ℹ️  Reasons this might happen:${NC}"
    echo -e "   • Backend specification export failed"
    echo -e "   • Client generation tools failed"
    echo -e "   • Missing dependencies"
    echo ""
    exit 1
}

# Run main function
main
