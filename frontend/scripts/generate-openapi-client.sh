#!/bin/bash
# OpenAPI Client Generator - Per-Module
# Generates TypeScript REST clients from per-module OpenAPI specifications.
#
# Usage:
#   ./scripts/generate-openapi-client.sh
#   TRADER_API_BASE_PATH="/api" ./scripts/generate-openapi-client.sh

set -e

# Configuration
BACKEND_DIR="../backend"
BACKEND_MODULES_DIR="$BACKEND_DIR/src/trading_api/modules"
BASE_PATH="${TRADER_API_BASE_PATH:-}"

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}🚀 OpenAPI Client Generator - Per-Module${NC}"
echo ""

# Validate package names before generation
echo -e "${BLUE}🔍 Validating package names...${NC}"
if ! (cd "$BACKEND_DIR" && poetry run python scripts/validate_package_names.py); then
    echo -e "${RED}❌ Package name validation failed!${NC}"
    echo -e "${YELLOW}💡 Fix package naming issues before generating clients${NC}"
    exit 1
fi
echo -e "${GREEN}✅ Package name validation passed${NC}"
echo ""

# Find all module OpenAPI specs
OPENAPI_SPECS=$(find "$BACKEND_MODULES_DIR" -type f -path "*/specs/openapi.json" 2>/dev/null || echo "")

if [ -z "$OPENAPI_SPECS" ]; then
    echo -e "${RED}❌ No OpenAPI specifications found in: $BACKEND_MODULES_DIR${NC}"
    echo -e "${YELLOW}💡 Generate them first: cd ../backend && make export-openapi-specs${NC}"
    exit 1
fi

# Count modules
MODULE_COUNT=$(echo "$OPENAPI_SPECS" | wc -l)
echo -e "${BLUE}📦 Found $MODULE_COUNT module(s) with OpenAPI specs${NC}"
echo ""

# Track success/failure
GENERATED_MODULES=()
FAILED_MODULES=()

# Generate client for each module
while IFS= read -r SPEC_PATH; do
    # Extract module name from path: .../modules/{module}/specs/openapi.json
    MODULE_NAME=$(echo "$SPEC_PATH" | sed -E 's|.*/modules/([^/]+)/specs/openapi\.json|\1|')
    OUTPUT_DIR="./src/clients/trader-client-${MODULE_NAME}"
    
    echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${BLUE}📦 Processing module: ${MODULE_NAME}${NC}"
    echo -e "${BLUE}   Spec: ${SPEC_PATH}${NC}"
    echo -e "${BLUE}   Output: ${OUTPUT_DIR}${NC}"
    
    # Clean up previous client for this module
    echo -e "${BLUE}🧹 Cleaning previous client...${NC}"
    rm -rf "$OUTPUT_DIR"
    mkdir -p "$OUTPUT_DIR"
    
    # Prepare generator command with module-specific package name
    generator_cmd="npx @openapitools/openapi-generator-cli generate \
        -i \"$SPEC_PATH\" \
        -g typescript-axios \
        -o \"$OUTPUT_DIR\" \
        -c \"./openapi-generator-config.json\" \
        --server-variables=host=,basePath= \
        --additional-properties=npmName=\"@trader-pro/client-${MODULE_NAME}\""
    
    # Add basePath override if specified
    if [ -n "$BASE_PATH" ]; then
        echo -e "${BLUE}🔧 Using custom basePath: $BASE_PATH${NC}"
        generator_cmd="$generator_cmd,basePath=\"$BASE_PATH\""
    fi
    
    # Generate client
    if eval "$generator_cmd" > /dev/null 2>&1; then
        echo -e "${GREEN}✅ Client generation successful${NC}"
        
        # Create api/index.ts with module-specific exports
        echo -e "${BLUE}🔧 Creating api/index.ts...${NC}"
        {
            echo "// Auto-generated API exports"
            echo "// This file is automatically generated. Do not edit manually."
            echo ""
            
            # Export all .ts files in api/ except index.ts
            for api_file in "$OUTPUT_DIR/api"/*.ts; do
                if [ "$(basename "$api_file")" != "index.ts" ]; then
                    filename=$(basename "$api_file" .ts)
                    echo "export * from './${filename}'"
                fi
            done
        } > "$OUTPUT_DIR/api/index.ts"
        
        # Create index file for easy imports
        cat > "$OUTPUT_DIR/index.ts" << 'EOF'
// Auto-generated API client exports
// This file is automatically generated. Do not edit manually.

// API Classes
export * from './api'

// Models/Types
export * from './models'

// Base configuration
export * from './base'
export * from './common'
export * from './configuration'

// Re-export commonly used types
export type {
  AxiosResponse,
  AxiosError,
  AxiosRequestConfig
} from 'axios'
EOF
        
        GENERATED_MODULES+=("$MODULE_NAME")
        echo -e "${GREEN}✅ Module '${MODULE_NAME}' client generated successfully${NC}"
    else
        echo -e "${RED}❌ Client generation failed for module: ${MODULE_NAME}${NC}"
        FAILED_MODULES+=("$MODULE_NAME")
    fi
    
    echo ""
done <<< "$OPENAPI_SPECS"

# Summary
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo -e "${BLUE}📊 Generation Summary${NC}"
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"

if [ ${#GENERATED_MODULES[@]} -gt 0 ]; then
    echo -e "${GREEN}✅ Successfully generated clients for ${#GENERATED_MODULES[@]} module(s):${NC}"
    for module in "${GENERATED_MODULES[@]}"; do
        echo -e "${GREEN}   - trader-client-${module}${NC}"
    done
fi

if [ ${#FAILED_MODULES[@]} -gt 0 ]; then
    echo -e "${RED}❌ Failed to generate clients for ${#FAILED_MODULES[@]} module(s):${NC}"
    for module in "${FAILED_MODULES[@]}"; do
        echo -e "${RED}   - ${module}${NC}"
    done
    exit 1
fi

echo ""
echo -e "${GREEN}🎉 Success! Generated all REST clients from per-module OpenAPI specifications${NC}"
echo -e "${GREEN}📁 Output: ./src/clients/trader-client-*/${NC}"
if [ -n "$BASE_PATH" ]; then
    echo -e "${GREEN}   - Using basePath: $BASE_PATH${NC}"
fi
echo ""
exit 0
