#!/bin/bash
# Frontend API Client Generator
# This script attempts to generate the TypeScript client from a live API server.
# If the API is not available, it falls back to using the mock client implementation.
#
# Usage:
#   ./scripts/generate-client.sh                    # Use default settings
#   VITE_API_URL=http://api.example.com ./scripts/generate-client.sh    # Custom API URL
#   TRADER_API_BASE_PATH="" ./scripts/generate-client.sh                 # Empty basePath (relative URLs)
#   TRADER_API_BASE_PATH="/api" ./scripts/generate-client.sh             # Custom basePath
#
# Environment Variables:
#   VITE_API_URL      - API server URL (default: http://localhost:8000)
#   BACKEND_PORT      - Backend port when using localhost (default: 8000)
#   TRADER_API_BASE_PATH - BasePath for generated client (default: auto-detected from OpenAPI spec)

set -e

# Configuration
API_URL="${VITE_API_URL:-http://localhost:${BACKEND_PORT:-8000}}"
OUTPUT_DIR="./src/clients/trader-client-generated"
OPENAPI_SPEC="openapi.json"
CLIENT_PACKAGE_NAME="@trading-api/client"
BASE_PATH="${TRADER_API_BASE_PATH:-}"  # Use same env var as frontend

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}🚀 Frontend API Client Generator${NC}"
echo ""

# Clean up previous generated client
echo -e "${BLUE}🧹 Cleaning previous generated client...${NC}"
rm -rf "$OUTPUT_DIR"
mkdir -p "$OUTPUT_DIR"
echo -e "${GREEN}✅ Cleanup complete${NC}"
echo ""

# Function to check if API server is available
check_api_available() {
    local health_url="$API_URL/api/v1/health"
    echo -e "${BLUE}📡 Checking API server at: $health_url${NC}"

    if curl -sf "$health_url" > /dev/null 2>&1; then
        echo -e "${GREEN}✅ API server is available${NC}"
        return 0
    else
        echo -e "${YELLOW}⚠️  API server is not available${NC}"
        return 1
    fi
}

# Function to download OpenAPI specification
download_openapi_spec() {
    # Downloading from server
    local openapi_url="$API_URL/api/v1/openapi.json"
    echo -e "${BLUE}📥 Downloading OpenAPI specification from: $openapi_url${NC}"

    if curl -sf "$openapi_url" -o "$OPENAPI_SPEC"; then
        echo -e "${GREEN}✅ OpenAPI specification downloaded${NC}"
        return 0
    else
        echo -e "${RED}❌ Failed to download OpenAPI specification${NC}"
        return 1
    fi
}

# Function to generate TypeScript client
generate_client() {
    echo -e "${BLUE}🔧 Generating TypeScript client...${NC}"

    # Prepare generator command
    local generator_cmd="npx @openapitools/openapi-generator-cli generate \
        -i \"$OPENAPI_SPEC\" \
        -g typescript-axios \
        -o \"$OUTPUT_DIR\" \
        -c \"./openapi-generator-config.json\" \
        --server-variables=host=,basePath="

    # Add basePath override if specified
    if [ -n "$BASE_PATH" ]; then
        echo -e "${BLUE}🔧 Using custom basePath: $BASE_PATH${NC}"
        generator_cmd="$generator_cmd --additional-properties=basePath=\"$BASE_PATH\""
    fi

    # Generate client using openapi-generator
    if eval "$generator_cmd" > /dev/null 2>&1; then
        echo -e "${GREEN}✅ Client generation successful${NC}"

        # Create index file for easy imports
        create_index_file

        return 0
    else
        echo -e "${RED}❌ Client generation failed${NC}"
        return 1
    fi
}

# Function to create index file
create_index_file() {
    cat > "$OUTPUT_DIR/index.ts" << 'EOF'
// Auto-generated API client exports
// This file is automatically generated. Do not edit manually.

// API Classes
export * from './api'

// Models/Types
export * from './models'

// Base configuration
export * from './base'
export * from './common'
export * from './configuration'

// Re-export commonly used types
export type {
  AxiosResponse,
  AxiosError,
  AxiosRequestConfig
} from 'axios'
EOF
}

# Main execution
main() {
    echo ""

    if check_api_available; then
        echo ""
        if download_openapi_spec; then
            echo ""
            if generate_client; then
                echo ""
                echo -e "${GREEN}🎉 Success! Generated client from live API${NC}"
                echo -e "${GREEN}📁 Client location: $OUTPUT_DIR${NC}"
                if [ -n "$BASE_PATH" ]; then
                    echo -e "${GREEN}🔧 Using basePath: $BASE_PATH${NC}"
                fi
                echo -e "${GREEN}🔧 Import in your components:${NC}"
                echo -e "   import { healthApi, versioningApi } from '@/clients/trader-client-generated/client-config'"
                echo ""

                # Cleanup
                # rm -f "$OPENAPI_SPEC"
                exit 0
            fi
        fi
    fi

    echo ""
    echo -e "${YELLOW}═══════════════════════════════════════════════════${NC}"
    echo -e "${YELLOW}⚠️  Could not generate client from live API${NC}"
    echo -e "${YELLOW}═══════════════════════════════════════════════════${NC}"
    echo ""
    echo -e "${BLUE}ℹ️  Reasons this might happen:${NC}"
    echo -e "   • Backend API server is not running"
    echo -e "   • API server is on a different URL"
    echo -e "   • Network connectivity issues"
    echo ""
    echo -e "${BLUE}💡 What happens now:${NC}"
    echo -e "   • App will use ${GREEN}mock data${NC} from apiService.ts"
    echo -e "   • All features will work for development"
    echo -e "   • You can generate later when API is ready"
    echo ""
    echo -e "${YELLOW}⚠️ Setup complete - using mock client${NC}"
    echo ""
}

# Run main function
main
