#!/bin/bash
# Frontend API Client Generator
# This script attempts to generate the TypeScript client from a live API server.
# If the API is not available, it falls back to using the mock client implementation.

set -e

# Configuration
API_URL="${VITE_API_URL:-http://localhost:${BACKEND_PORT:-8000}}"
OUTPUT_DIR="./src/services/generated"
OPENAPI_SPEC="openapi.json"
CLIENT_PACKAGE_NAME="@trading-api/client"

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}🚀 Frontend API Client Generator${NC}"
echo ""

# Clean up previous generated client
echo -e "${BLUE}🧹 Cleaning previous generated client...${NC}"
rm -rf "$OUTPUT_DIR"
mkdir -p "$OUTPUT_DIR"
echo -e "${GREEN}✅ Cleanup complete${NC}"
echo ""

# Function to check if API server is available
check_api_available() {
    local health_url="$API_URL/api/v1/health"
    echo -e "${BLUE}📡 Checking API server at: $health_url${NC}"

    if curl -sf "$health_url" > /dev/null 2>&1; then
        echo -e "${GREEN}✅ API server is available${NC}"
        return 0
    else
        echo -e "${YELLOW}⚠️  API server is not available${NC}"
        return 1
    fi
}

# Function to download OpenAPI specification
download_openapi_spec() {
    # First, try to use local file if it exists (for file watching mode)
    local local_openapi="../backend/openapi.json"
    if [ -f "$local_openapi" ]; then
        echo -e "${BLUE}📁 Using local OpenAPI specification: $local_openapi${NC}"
        cp "$local_openapi" "$OPENAPI_SPEC"
        echo -e "${GREEN}✅ Local OpenAPI specification copied${NC}"
        return 0
    fi

    # Fallback to downloading from server
    local openapi_url="$API_URL/api/v1/openapi.json"
    echo -e "${BLUE}📥 Downloading OpenAPI specification from: $openapi_url${NC}"

    if curl -sf "$openapi_url" -o "$OPENAPI_SPEC"; then
        echo -e "${GREEN}✅ OpenAPI specification downloaded${NC}"
        return 0
    else
        echo -e "${RED}❌ Failed to download OpenAPI specification${NC}"
        return 1
    fi
}

# Function to generate TypeScript client
generate_client() {
    echo -e "${BLUE}🔧 Generating TypeScript client...${NC}"

    # Generate client using openapi-generator
    if npx @openapitools/openapi-generator-cli generate \
        -i "$OPENAPI_SPEC" \
        -g typescript-axios \
        -o "$OUTPUT_DIR" \
        --additional-properties="\
npmName=$CLIENT_PACKAGE_NAME,\
supportsES6=true,\
typescriptThreePlus=true,\
withInterfaces=true,\
withSeparateModelsAndApi=true,\
apiPackage=api,\
modelPackage=models,\
useSingleRequestParameter=true\
" > /dev/null 2>&1; then

        echo -e "${GREEN}✅ Client generation successful${NC}"

        # Create index file for easy imports
        create_index_file

        # Create configuration wrapper
        create_config_wrapper

        # Create client type indicator
        echo "server" > "$OUTPUT_DIR/.client-type"

        return 0
    else
        echo -e "${RED}❌ Client generation failed${NC}"
        return 1
    fi
}

# Function to create index file
create_index_file() {
    cat > "$OUTPUT_DIR/index.ts" << 'EOF'
// Auto-generated API client exports
// This file is automatically generated. Do not edit manually.

// API Classes
export * from './api'

// Models/Types
export * from './models'

// Base configuration
export * from './base'
export * from './common'
export * from './configuration'

// Re-export commonly used types
export type {
  AxiosResponse,
  AxiosError,
  AxiosRequestConfig
} from 'axios'
EOF
}

# Function to create configuration wrapper
create_config_wrapper() {
    cat > "$OUTPUT_DIR/client-config.ts" << 'EOF'
// Trading API Client Configuration
// This file provides a pre-configured client instance

import { Configuration } from './configuration'
import { HealthApi, VersioningApi } from './api'

// API Configuration - using empty basePath for same-origin requests
const apiConfig = new Configuration({
  basePath: '',
})

// Pre-configured API client instances
export const healthApi = new HealthApi(apiConfig)
export const versioningApi = new VersioningApi(apiConfig)

// Export configuration for custom instances
export { apiConfig, Configuration }

// Export all API classes
export * from './api'
export * from './models'
EOF
}

# Function to setup mock client fallback
setup_mock_fallback() {
    echo -e "${YELLOW}🎭 Setting up mock client fallback...${NC}"

    # Ensure directory exists for mock mode
    mkdir -p "$OUTPUT_DIR"

    # Create a marker file to indicate mock mode
    echo "mock" > "$OUTPUT_DIR/.client-type"

    cat > "$OUTPUT_DIR/README.md" << 'EOF'
# Mock API Client

The generated API client is not available because the backend API server is not running.

The application will automatically use mock data from `apiService.ts` for development and testing.

## To generate the real client:

1. Start the backend API server:
   ```bash
   cd ../backend
   make dev
   ```

2. Re-run client generation:
   ```bash
   npm run client:generate
   ```

## Manual generation:

```bash
./scripts/generate-client.sh
```

The app will work perfectly fine with mock data for development!
EOF

    echo -e "${GREEN}✅ Mock client fallback configured${NC}"
    echo -e "${YELLOW}📝 The app will use mock data from apiService.ts${NC}"
}

# Main execution
main() {
    echo ""

    if check_api_available; then
        echo ""
        if download_openapi_spec; then
            echo ""
            if generate_client; then
                echo ""
                echo -e "${GREEN}🎉 Success! Generated client from live API${NC}"
                echo -e "${GREEN}📁 Client location: $OUTPUT_DIR${NC}"
                echo -e "${GREEN}🔧 Import in your components:${NC}"
                echo -e "   import { healthApi, versioningApi } from '@/services/generated/client-config'"
                echo ""

                # Cleanup
                rm -f "$OPENAPI_SPEC"
                exit 0
            fi
        fi
    fi

    echo ""
    echo -e "${YELLOW}═══════════════════════════════════════════════════${NC}"
    echo -e "${YELLOW}⚠️  Could not generate client from live API${NC}"
    echo -e "${YELLOW}═══════════════════════════════════════════════════${NC}"
    echo ""
    echo -e "${BLUE}ℹ️  Reasons this might happen:${NC}"
    echo -e "   • Backend API server is not running"
    echo -e "   • API server is on a different URL"
    echo -e "   • Network connectivity issues"
    echo ""
    echo -e "${BLUE}💡 What happens now:${NC}"
    echo -e "   • App will use ${GREEN}mock data${NC} from apiService.ts"
    echo -e "   • All features will work for development"
    echo -e "   • You can generate later when API is ready"
    echo ""
    echo -e "${BLUE}🚀 To generate from live API:${NC}"
    echo -e "   1. Start backend: ${GREEN}cd backend && make dev${NC}"
    echo -e "   2. Run: ${GREEN}npm run client:generate${NC}"
    echo ""

    setup_mock_fallback

    echo ""
    echo -e "${GREEN}✅ Setup complete - using mock client${NC}"
    echo ""
}

# Run main function
main
