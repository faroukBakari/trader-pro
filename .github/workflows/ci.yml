name: CI

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ main ]

env:
  BACKEND_PORT: 8000
  FRONTEND_PORT: 5173
  VITE_API_URL: http://localhost:8000
  FRONTEND_URL: http://localhost:5173

jobs:
  backend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: backend/.venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('backend/poetry.lock') }}-v2

    - name: Install backend dependencies
      working-directory: backend
      run: make install-ci

    - name: Install Git hooks
      run: |
        git config core.hooksPath .githooks
        chmod +x .githooks/*

    - name: Run backend tests with coverage
      working-directory: backend
      run: make test-cov

    - name: Run backend linting
      working-directory: backend
      run: make lint-check

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: backend/coverage.xml
        flags: backend
        name: codecov-backend

  frontend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ["22"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: frontend
      run: make install-ci

    - name: Install Git hooks
      run: |
        git config core.hooksPath .githooks
        chmod +x .githooks/*

    - name: Run frontend linting
      working-directory: frontend
      run: make lint

    - name: Run frontend type checking
      working-directory: frontend
      run: make type-check

    - name: Run frontend tests
      working-directory: frontend
      run: make test-run

    - name: Build frontend
      working-directory: frontend
      run: make build

  integration:
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Set up Node.js 22
      uses: actions/setup-node@v4
      with:
        node-version: "22"
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install backend dependencies
      working-directory: backend
      run: make install-ci

    - name: Install frontend dependencies
      working-directory: frontend
      run: make install-ci

    - name: Start backend server
      working-directory: backend
      run: make dev-ci
      env:
        CI: true

    - name: Test API endpoints
      working-directory: backend
      run: make health-ci

    - name: Generate frontend client from live API
      working-directory: frontend
      run: npm run client:generate
      env:
        VITE_API_URL: http://localhost:${{ env.BACKEND_PORT }}
        BACKEND_PORT: ${{ env.BACKEND_PORT }}

    - name: Verify client generation
      working-directory: frontend
      run: |
        if [ ! -f "src/services/generated/.client-type" ]; then
          echo "❌ Client generation failed - no .client-type file"
          exit 1
        fi
        CLIENT_TYPE=$(cat src/services/generated/.client-type)
        if [ "$CLIENT_TYPE" != "server" ]; then
          echo "❌ Expected 'server' client but got '$CLIENT_TYPE'"
          exit 1
        fi
        echo "✅ Client generated successfully from live API"

    - name: Build frontend against live API
      working-directory: frontend
      run: make build
      env:
        VITE_API_URL: http://localhost:8000
