name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  backend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: backend/.venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('backend/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      working-directory: backend
      run: poetry install --no-interaction --no-root

    - name: Install project
      working-directory: backend
      run: poetry install --no-interaction

    - name: Install Git hooks
      run: |
        git config core.hooksPath .githooks
        chmod +x .githooks/*

    - name: Run tests
      working-directory: backend
      run: |
        poetry run pytest --cov=trading_api --cov-report=xml --cov-report=term-missing

    - name: Run linting
      working-directory: backend
      run: |
        poetry run black --check src/ tests/
        poetry run isort --check-only src/ tests/
        poetry run flake8 src/ tests/
        poetry run mypy src/

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: backend/coverage.xml
        flags: backend
        name: codecov-backend

  frontend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ["22"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: frontend
      run: npm ci

    - name: Install Git hooks
      run: |
        git config core.hooksPath .githooks
        chmod +x .githooks/*

    - name: Run linting
      working-directory: frontend
      run: |
        npm run lint
        npx prettier --check src/

    - name: Run type checking
      working-directory: frontend
      run: npm run type-check

    - name: Run tests
      working-directory: frontend
      run: npm run test:unit run

    - name: Build
      working-directory: frontend
      run: npm run build

  integration:
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Set up Node.js 22
      uses: actions/setup-node@v4
      with:
        node-version: "22"
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install backend dependencies
      working-directory: backend
      run: poetry install --no-interaction

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: Start backend server
      working-directory: backend
      run: |
        poetry run uvicorn trading_api.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
      env:
        CI: true

    - name: Test API health
      run: |
        curl -f http://localhost:8000/api/v1/health || exit 1
        curl -f http://localhost:8000/api/v1/version || exit 1

    - name: Build frontend against live API
      working-directory: frontend
      run: |
        npm run build
      env:
        VITE_API_URL: http://localhost:8000
