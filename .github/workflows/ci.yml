name: CI

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ main ]

env:
  BACKEND_PORT: 8000
  FRONTEND_PORT: 5173
  VITE_API_URL: http://localhost:8000
  FRONTEND_URL: http://localhost:5173

jobs:
  # Backend setup and linting (runs once)
  backend-setup:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: backend/.venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('backend/poetry.lock') }}-v2

    - name: Install backend dependencies
      working-directory: backend
      run: make install-ci

    - name: Generate WebSocket routers
      working-directory: backend
      run: make generate-ws-routers

    - name: Install Git hooks
      run: |
        git config core.hooksPath .githooks
        chmod +x .githooks/*

    - name: Run backend linting
      working-directory: backend
      run: make lint-check

  # Backend boundary tests (runs once, enforces module isolation)
  backend-boundaries:
    runs-on: ubuntu-latest
    needs: [backend-setup]
    strategy:
      matrix:
        python-version: ["3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: backend/.venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('backend/poetry.lock') }}-v2

    - name: Install backend dependencies
      working-directory: backend
      run: make install-ci

    - name: Generate WebSocket routers
      working-directory: backend
      run: make generate-ws-routers

    - name: Run import boundary tests
      working-directory: backend
      run: make test-boundaries

  # Backend shared infrastructure tests (runs once)
  backend-shared:
    runs-on: ubuntu-latest
    needs: [backend-setup]
    strategy:
      matrix:
        python-version: ["3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: backend/.venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('backend/poetry.lock') }}-v2

    - name: Install backend dependencies
      working-directory: backend
      run: make install-ci

    - name: Generate WebSocket routers
      working-directory: backend
      run: make generate-ws-routers

    - name: Run shared infrastructure tests
      working-directory: backend
      run: make test-shared

  # Backend module tests (runs in parallel per module)
  backend-modules:
    runs-on: ubuntu-latest
    needs: [backend-setup]
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11"]
        module: ["broker", "datafeed"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: backend/.venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('backend/poetry.lock') }}-v2

    - name: Install backend dependencies
      working-directory: backend
      run: make install-ci

    - name: Generate WebSocket routers
      working-directory: backend
      run: make generate-ws-routers

    - name: Run ${{ matrix.module }} module tests
      working-directory: backend
      run: make test-module-${{ matrix.module }}

  # Backend integration tests (runs once, requires all modules)
  backend-integration:
    runs-on: ubuntu-latest
    needs: [backend-boundaries, backend-shared, backend-modules]
    strategy:
      matrix:
        python-version: ["3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: backend/.venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('backend/poetry.lock') }}-v2

    - name: Install backend dependencies
      working-directory: backend
      run: make install-ci

    - name: Generate WebSocket routers
      working-directory: backend
      run: make generate-ws-routers

    - name: Run integration tests
      working-directory: backend
      run: make test-integration

    - name: Run all tests with coverage (final report)
      working-directory: backend
      run: make test-cov

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: backend/coverage.xml
        flags: backend
        name: codecov-backend

  # Backend export per-module specs (NEW for Phase 4)
  backend-export-specs:
    runs-on: ubuntu-latest
    needs: [backend-integration]
    strategy:
      matrix:
        python-version: ["3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: backend/.venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('backend/poetry.lock') }}-v2

    - name: Install backend dependencies
      working-directory: backend
      run: make install-ci

    - name: Generate WebSocket routers
      working-directory: backend
      run: make generate-ws-routers

    - name: Export per-module OpenAPI specs
      working-directory: backend
      run: make export-openapi-spec

    - name: Export per-module AsyncAPI specs
      working-directory: backend
      run: make export-asyncapi-spec

    - name: Verify specs generated
      working-directory: backend
      run: |
        echo "Verifying per-module specs..."
        if [ ! -f "src/trading_api/modules/broker/specs/openapi.json" ]; then
          echo "❌ Broker OpenAPI spec not found"
          exit 1
        fi
        if [ ! -f "src/trading_api/modules/datafeed/specs/openapi.json" ]; then
          echo "❌ Datafeed OpenAPI spec not found"
          exit 1
        fi
        if [ ! -f "src/trading_api/modules/broker/specs/asyncapi.json" ]; then
          echo "❌ Broker AsyncAPI spec not found"
          exit 1
        fi
        if [ ! -f "src/trading_api/modules/datafeed/specs/asyncapi.json" ]; then
          echo "❌ Datafeed AsyncAPI spec not found"
          exit 1
        fi
        echo "✅ All per-module specs generated successfully"

    - name: Upload backend specs as artifacts
      uses: actions/upload-artifact@v3
      with:
        name: backend-specs
        path: |
          backend/src/trading_api/modules/*/specs/*.json
        retention-days: 7

  # Backend generate Python HTTP clients (NEW for Phase 4)
  backend-generate-python-clients:
    runs-on: ubuntu-latest
    needs: [backend-export-specs]
    strategy:
      matrix:
        python-version: ["3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: backend/.venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('backend/poetry.lock') }}-v2

    - name: Install backend dependencies
      working-directory: backend
      run: make install-ci

    - name: Download backend specs
      uses: actions/download-artifact@v3
      with:
        name: backend-specs
        path: backend/src/trading_api/modules/

    - name: Generate Python HTTP clients
      working-directory: backend
      run: make generate-python-clients

    - name: Verify Python clients generated
      working-directory: backend
      run: |
        echo "Verifying Python HTTP clients..."
        if [ ! -f "src/trading_api/clients/broker_client.py" ]; then
          echo "❌ Broker client not found"
          exit 1
        fi
        if [ ! -f "src/trading_api/clients/datafeed_client.py" ]; then
          echo "❌ Datafeed client not found"
          exit 1
        fi
        if [ ! -f "src/trading_api/clients/__init__.py" ]; then
          echo "❌ Clients __init__.py not found"
          exit 1
        fi
        echo "✅ All Python HTTP clients generated successfully"

    - name: Upload Python clients as artifacts
      uses: actions/upload-artifact@v3
      with:
        name: backend-python-clients
        path: |
          backend/src/trading_api/clients/
        retention-days: 7

  frontend:
    runs-on: ubuntu-latest
    needs: [backend-export-specs]
    strategy:
      matrix:
        node-version: ["22"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Download backend specs
      uses: actions/download-artifact@v3
      with:
        name: backend-specs
        path: backend/src/trading_api/modules/

    - name: Install frontend dependencies
      working-directory: frontend
      run: make install-ci

    - name: Generate per-module frontend clients (offline from specs)
      working-directory: frontend
      run: |
        make generate-openapi-client
        make generate-asyncapi-types

    - name: Verify per-module client generation
      working-directory: frontend
      run: |
        if [ ! -d "src/clients/trader-client-broker" ]; then
          echo "❌ Broker client generation failed - no trader-client-broker directory"
          exit 1
        fi
        if [ ! -d "src/clients/trader-client-datafeed" ]; then
          echo "❌ Datafeed client generation failed - no trader-client-datafeed directory"
          exit 1
        fi
        if [ ! -d "src/clients/ws-types-broker" ]; then
          echo "❌ Broker WebSocket types generation failed - no ws-types-broker directory"
          exit 1
        fi
        if [ ! -d "src/clients/ws-types-datafeed" ]; then
          echo "❌ Datafeed WebSocket types generation failed - no ws-types-datafeed directory"
          exit 1
        fi
        echo "✅ Per-module REST clients and WebSocket types generated successfully"

    - name: Install Git hooks
      run: |
        git config core.hooksPath .githooks
        chmod +x .githooks/*

    - name: Run frontend linting
      working-directory: frontend
      run: make lint
      env:
        CI: true

    - name: Run frontend type checking
      working-directory: frontend
      run: make type-check
      env:
        CI: true

    - name: Run frontend tests
      working-directory: frontend
      run: make test
      env:
        CI: true

    - name: Build frontend
      working-directory: frontend
      run: make build

  integration:
    runs-on: ubuntu-latest
    needs: [backend-integration, frontend]
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Set up Node.js 22
      uses: actions/setup-node@v4
      with:
        node-version: "22"
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install backend dependencies
      working-directory: backend
      run: make install-ci

    - name: Generate WebSocket routers
      working-directory: backend
      run: make generate-ws-routers

    - name: Download backend specs
      uses: actions/download-artifact@v3
      with:
        name: backend-specs
        path: backend/src/trading_api/modules/

    - name: Install frontend dependencies
      working-directory: frontend
      run: make install-ci

    - name: Generate per-module frontend clients (offline from specs)
      working-directory: frontend
      run: |
        make generate-openapi-client
        make generate-asyncapi-types

    - name: Verify per-module client generation
      working-directory: frontend
      run: |
        if [ ! -d "src/clients/trader-client-broker" ]; then
          echo "❌ Broker client generation failed - no trader-client-broker directory"
          exit 1
        fi
        if [ ! -d "src/clients/trader-client-datafeed" ]; then
          echo "❌ Datafeed client generation failed - no trader-client-datafeed directory"
          exit 1
        fi
        if [ ! -d "src/clients/ws-types-broker" ]; then
          echo "❌ Broker WebSocket types generation failed - no ws-types-broker directory"
          exit 1
        fi
        if [ ! -d "src/clients/ws-types-datafeed" ]; then
          echo "❌ Datafeed WebSocket types generation failed - no ws-types-datafeed directory"
          exit 1
        fi
        echo "✅ Per-module REST clients and WebSocket types generated successfully"

    - name: Start backend server
      working-directory: backend
      run: make dev-ci
      env:
        CI: true

    - name: Test API endpoints
      working-directory: backend
      run: make health-ci

    - name: Build frontend against live API
      working-directory: frontend
      run: make build
      env:
        VITE_API_URL: http://localhost:8000
