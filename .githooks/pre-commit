#!/bin/bash
# Pre-commit hook dispatcher for trading-api
# This script runs appropriate checks based on changed files

set -e

# Source shared library
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$script_dir/shared-lib.sh"

# Repository root
repo_root="$(git rev-parse --show-toplevel)"
cd "$repo_root"

# Check if we should skip hooks
if should_skip_hooks; then
    log_warning "Skipping pre-commit hooks (SKIP_HOOKS=true or NO_VERIFY=true)"
    exit 0
fi

# Stash unstaged changes before running checks
STASH_NAME="pre-commit-$(date +%s)"
STASHED=0

log_info "Checking working directory state..."

# Check for untracked files in source directories
untracked_in_src=$(git ls-files --others --exclude-standard -- \
    'backend/src/**/*.py' \
    'frontend/src/**/*.ts' \
    'frontend/src/**/*.vue' \
    'frontend/src/**/*.js' 2>/dev/null || true)

if [[ -n "$untracked_in_src" ]]; then
    untracked_count=$(echo "$untracked_in_src" | wc -l)
    log_warning "‚ö†Ô∏è  Found $untracked_count untracked source file(s):"
    echo "$untracked_in_src" | head -5
    if [[ $untracked_count -gt 5 ]]; then
        echo "   ... and $((untracked_count - 5)) more"
    fi
    log_warning "These files will be stashed during checks but are NOT being committed"
    log_warning "Consider: 'git add <file>' to include OR add to .gitignore"
    echo ""
fi

# Stash unstaged and untracked changes
log_info "Stashing unstaged and untracked changes..."
if git diff --quiet && [[ -z "$untracked_in_src" ]]; then
    log_info "No unstaged or untracked changes to stash"
else
    git stash push -k -u -m "$STASH_NAME" >/dev/null 2>&1 || true
    STASHED=1
    log_success "Unstaged and untracked changes stashed (will be restored after checks)"
fi

# Setup trap to ALWAYS restore stashed changes
trap 'restore_stash' EXIT

restore_stash() {
    if [[ $STASHED -eq 1 ]]; then
        log_info "Restoring stashed changes..."
        if git stash pop >/dev/null 2>&1; then
            log_success "Stashed changes restored"
        else
            log_warning "Failed to restore stashed changes automatically. Run 'git stash pop' manually."
        fi
    fi
}

log_info "Running pre-commit checks for trading-api..."

# Detect what files are staged
backend_files=$(get_staged_files "^backend/.*\.py$")
frontend_files=$(get_staged_files "^frontend/.*\.(js|ts|vue)$")
config_files=$(get_staged_files "\.(json|yaml|yml|toml)$")

# Common checks for all files
if [[ -n "$config_files" ]] || [[ -n "$backend_files" ]] || [[ -n "$frontend_files" ]]; then
    log_info "Running common file checks..."

    # Check for trailing whitespace
    if ! run_check "Trailing whitespace check" "git diff --check --cached  -- .:^frontend/public/"; then
        exit 1
    fi

    # Check for merge conflicts (avoid false positives from regex patterns)
    if git diff --check | grep -i conflict; then
        log_error "Merge conflict markers found in staged files"
        exit 1
    fi
fi

# Backend Python checks
if [[ -n "$backend_files" ]]; then
    log_info "Found Python files, running backend checks..."

    cd "$repo_root/backend"

    # Check if Poetry is available
    if ! command_exists poetry; then
        log_error "Poetry not found. Please install Poetry to run backend checks."
        exit 1
    fi

    # Format backend code (auto-fix with Black and isort)
    if ! run_check "Backend formatting" "make format" "$repo_root/backend"; then
        exit 1
    fi

    # Lint backend code (flake8 + mypy)
    if ! run_check "Backend linting" "make lint-check" "$repo_root/backend"; then
        exit 1
    fi

    # Run tests (only if not in CI for speed)
    if ! is_ci; then
        if ! run_check "Backend tests" "make test" "$repo_root/backend"; then
            exit 1
        fi
    fi

    # Validate API specifications (always run to catch schema issues)
    if ! run_check "OpenAPI spec validation" "make export-openapi-spec" "$repo_root/backend"; then
        log_error "OpenAPI spec export/validation failed"
        log_error "This usually means there are issues with your API models or routes"
        exit 1
    fi

    if ! run_check "AsyncAPI spec validation" "make export-asyncapi-spec" "$repo_root/backend"; then
        log_error "AsyncAPI spec export/validation failed"
        log_error "This usually means there are issues with your WebSocket models"
        log_error "Check for optional parameters in subscription request models"
        exit 1
    fi
fi

# Frontend TypeScript/Vue checks
if [[ -n "$frontend_files" ]]; then
    log_info "Found frontend files, running frontend checks..."

    cd "$repo_root/frontend"

    # Check if npm is available
    if ! command_exists npm; then
        log_error "npm not found. Please install Node.js and npm to run frontend checks."
        exit 1
    fi

    # Check if node_modules exists
    if [[ ! -d "node_modules" ]]; then
        log_warning "node_modules not found. Running npm install..."
        npm install
    fi

    # Linting (includes client generation)
    if ! run_check "Frontend linting" "make lint" "$repo_root/frontend"; then
        log_warning "Run 'cd frontend && make lint' to fix linting issues"
        exit 1
    fi

    # TypeScript type checking (includes client generation)
    if ! run_check "TypeScript type checking" "make type-check" "$repo_root/frontend"; then
        exit 1
    fi

    # Run tests (only if not in CI for speed, includes client generation)
    if ! is_ci; then
        if ! run_check "Frontend tests" "make test" "$repo_root/frontend"; then
            exit 1
        fi
    fi
fi

# All checks passed
log_success "All pre-commit checks passed! üéâ"
exit 0