#!/usr/bin/env python3
"""
WebSocket Router Code Generator

Generates concrete (non-generic) WebSocket router classes by substituting
generic type parameters with actual types from instantiation signatures.
"""

import re
import shutil
from pathlib import Path
from typing import NamedTuple


class RouterSpec(NamedTuple):
    """Specification for generating a router."""

    class_name: str
    request_type: str
    data_type: str


# TODO: validate router syntax and report errors more gracefully
def parse_router_specs(ws_dir: Path) -> list[RouterSpec]:
    """
    Parse WebSocket router files to extract TypeAlias definitions.

    Looks for patterns like:
        BarWsRouter: TypeAlias = WsRouter[BarsSubscriptionRequest, Bar]
        BrokerConnectionWsRouter: TypeAlias = WsRouter[
            BrokerConnectionSubscriptionRequest, BrokerConnectionStatus
        ]

    Returns a list of RouterSpec instances.
    """
    router_specs = []
    # Pattern matches both single-line and multi-line TypeAlias declarations
    # re.DOTALL makes . match newlines, allowing matching across multiple lines
    pattern = re.compile(
        r"^\s*(\w+):\s*TypeAlias\s*=\s*WsRouter\[\s*(\w+)\s*,\s*(\w+)\s*\]",
        re.MULTILINE | re.DOTALL,
    )

    # Find all .py files except generic.py and files in generated/
    for py_file in ws_dir.glob("*.py"):
        if py_file.name in ("__init__.py", "generic.py", "router_interface.py"):
            continue

        content = py_file.read_text()

        # Find all matches in the file
        for match in pattern.finditer(content):
            class_name = match.group(1)
            request_type = match.group(2)
            data_type = match.group(3)

            router_specs.append(
                RouterSpec(
                    class_name=class_name,
                    request_type=request_type,
                    data_type=data_type,
                )
            )

    return router_specs


def generate_router_code(spec: RouterSpec, template: str) -> str:
    """Generate concrete router code from template and spec."""
    lines = template.split("\n")
    result_lines = [
        f"from trading_api.models import {spec.request_type}, {spec.data_type}"
    ]
    for line in lines:
        if "TypeVar(" in line:
            continue
        if "class WsRouter(" in line:
            result_lines.append(f"class {spec.class_name}(WsRouterInterface):")
            continue
        modified_line = line.replace("__TRequest", spec.request_type)
        modified_line = modified_line.replace("__TData", spec.data_type)
        result_lines.append(modified_line)
    return "\n".join(result_lines)


def generate_init_file(specs: list[RouterSpec]) -> str:
    """Generate __init__.py for the generated package."""
    imports = []
    exports = []

    for spec in specs:
        module_name = spec.class_name.lower()
        imports.append(f"from .{module_name} import {spec.class_name}")
        exports.append(f'"{spec.class_name}"')

    imports_str = "\n".join(imports)
    exports_str = ",\n    ".join(exports)

    return f'''"""
Auto-generated WebSocket routers.

DO NOT EDIT MANUALLY - Generated by scripts/generate_ws_router.py
"""

{imports_str}

__all__ = [
    {exports_str},
]
'''


def main():
    """Generate all router classes."""
    template = Path(f"{Path.cwd()}/src/trading_api/ws/generic.py").read_text()
    print("📖 Read generic template from ws/generic.py")

    output_dir = Path(f"{Path.cwd()}/src/trading_api/ws/generated")
    if output_dir.exists():
        shutil.rmtree(output_dir)
        print(f"🧹 Removed existing directory: {output_dir.relative_to(Path.cwd())}")
    output_dir.mkdir(parents=True, exist_ok=True)

    print(f"\n📁 Generating WebSocket routers in: {output_dir.relative_to(Path.cwd())}")

    ws_dir = Path(f"{Path.cwd()}/src/trading_api/ws")
    router_specs = parse_router_specs(ws_dir)

    for spec in router_specs:
        # Derive module name from class name (e.g., BarWsRouter -> bar.py)
        module_name = spec.class_name.lower()
        output_file = output_dir / f"{module_name}.py"

        content = generate_router_code(spec, template)
        output_file.write_text(content)
        print(f"  ✓ Generated {module_name}.py")
        print(f"    - Class: {spec.class_name}")
        print(f"    - Request type: {spec.request_type}")
        print(f"    - Data type: {spec.data_type}")

    init_file = output_dir / "__init__.py"
    init_content = generate_init_file(router_specs)
    init_file.write_text(init_content)
    print(f"  ✓ Generated __init__.py")

    print(f"\n✅ Generated {len(router_specs)} router class(es)")
    print(f"\n📝 Usage example:")
    print(f"  from trading_api.ws.generated import BarWsRouter")
    print(f"  router = BarWsRouter(route='bars', tags=['datafeed'])")
    print(f"\n💡 To regenerate: make generate-ws-routers")


if __name__ == "__main__":
    main()
