#!/bin/bash
# Enhanced script to generate Vue.js/TypeScript client for frontend integration

set -e

# Configuration
OUTPUT_DIR="../frontend/src/services/generated"
OPENAPI_CHECKSUM_FILE=".openapi-checksum"
BACKEND_URL="http://localhost:8000"
CLIENT_PACKAGE_NAME="@trading-api/client"

echo "🚀 Generating Frontend TypeScript Client..."

# Function to check if API server is running
check_api_server() {
    curl -s "$BACKEND_URL/api/v1/health" > /dev/null 2>&1
}

# Function to start API server temporarily
start_temp_server() {
    echo "📡 Starting temporary API server..."
    poetry run uvicorn trading_api.main:app --host 0.0.0.0 --port 8000 &
    API_PID=$!
    sleep 5
    
    # Verify server started
    for i in {1..10}; do
        if check_api_server; then
            echo "✅ API server is ready"
            return 0
        fi
        echo "⏳ Waiting for API server... ($i/10)"
        sleep 1
    done
    
    echo "❌ Failed to start API server"
    return 1
}

# Function to stop temporary server
stop_temp_server() {
    if [ ! -z "$API_PID" ]; then
        echo "🛑 Stopping temporary API server..."
        kill $API_PID 2>/dev/null || true
        wait $API_PID 2>/dev/null || true
    fi
}

# Function to download OpenAPI spec
download_openapi_spec() {
    echo "📥 Downloading OpenAPI specification..."
    curl -s "$BACKEND_URL/api/v1/openapi.json" -o openapi.json
    
    if [ ! -s openapi.json ]; then
        echo "❌ Failed to download OpenAPI specification"
        return 1
    fi
    
    echo "✅ OpenAPI specification downloaded"
}

# Function to check if regeneration is needed
needs_regeneration() {
    if [ ! -f "$OPENAPI_CHECKSUM_FILE" ]; then
        echo "🆕 No previous checksum found, generation needed"
        return 0
    fi
    
    if [ ! -d "$OUTPUT_DIR" ]; then
        echo "🆕 Output directory doesn't exist, generation needed"
        return 0
    fi
    
    local current_checksum=$(sha256sum openapi.json | cut -d' ' -f1)
    local previous_checksum=$(cat "$OPENAPI_CHECKSUM_FILE" 2>/dev/null || echo "")
    
    if [ "$current_checksum" != "$previous_checksum" ]; then
        echo "🔄 API changes detected, regeneration needed"
        echo "   Previous: $previous_checksum"
        echo "   Current:  $current_checksum"
        return 0
    fi
    
    echo "✅ No changes detected, skipping generation"
    return 1
}

# Function to generate client
generate_client() {
    echo "🔧 Generating TypeScript client..."
    
    # Clean output directory
    rm -rf "$OUTPUT_DIR"
    mkdir -p "$OUTPUT_DIR"
    
    # Generate client using openapi-generator
    npx @openapitools/openapi-generator-cli generate \
        -i openapi.json \
        -g typescript-axios \
        -o "$OUTPUT_DIR" \
        --additional-properties="\
npmName=$CLIENT_PACKAGE_NAME,\
supportsES6=true,\
typescriptThreePlus=true,\
withInterfaces=true,\
withSeparateModelsAndApi=true,\
apiPackage=api,\
modelPackage=models,\
useSingleRequestParameter=true\
"
    
    if [ $? -eq 0 ]; then
        echo "✅ Client generation successful"
        
        # Save checksum for future comparisons
        sha256sum openapi.json | cut -d' ' -f1 > "$OPENAPI_CHECKSUM_FILE"
        
        # Create index file for easy imports
        create_index_file
        
        # Create configuration wrapper
        create_config_wrapper
        
        echo "📦 Client ready at: $OUTPUT_DIR"
        return 0
    else
        echo "❌ Client generation failed"
        return 1
    fi
}

# Function to create index file
create_index_file() {
    cat > "$OUTPUT_DIR/index.ts" << 'EOF'
// Auto-generated API client exports
// This file is automatically generated. Do not edit manually.

// API Classes
export * from './api'

// Models/Types
export * from './models'

// Base configuration
export * from './base'
export * from './common'
export * from './configuration'

// Re-export commonly used types
export type {
  AxiosResponse,
  AxiosError,
  AxiosRequestConfig
} from 'axios'
EOF
    
    echo "📄 Created index.ts for easy imports"
}

# Function to create configuration wrapper
create_config_wrapper() {
    cat > "$OUTPUT_DIR/client-config.ts" << 'EOF'
// Trading API Client Configuration
// This file provides a pre-configured client instance

import { Configuration } from './configuration'
import { DefaultApi } from './api'

// API Configuration
const apiConfig = new Configuration({
  basePath: '', // Empty for Vite proxy in development
  // Add other configuration options as needed:
  // basePath: process.env.VITE_API_BASE_URL || '',
  // apiKey: process.env.VITE_API_KEY,
})

// Pre-configured API client instance
export const apiClient = new DefaultApi(apiConfig)

// Export configuration for custom instances
export { apiConfig, Configuration, DefaultApi }

// Export all API classes for granular control
export * from './api'
export * from './models'
EOF
    
    echo "⚙️ Created client-config.ts wrapper"
}

# Main execution
main() {
    local server_was_running=false
    
    # Check if server is already running
    if check_api_server; then
        echo "✅ API server is already running"
        server_was_running=true
    else
        if ! start_temp_server; then
            echo "❌ Failed to start API server"
            exit 1
        fi
    fi
    
    # Ensure cleanup on exit
    if [ "$server_was_running" = false ]; then
        trap stop_temp_server EXIT
    fi
    
    # Download OpenAPI spec
    if ! download_openapi_spec; then
        exit 1
    fi
    
    # Check if regeneration is needed (unless forced)
    if [ "$1" != "--force" ] && ! needs_regeneration; then
        echo "🎯 Client is up to date"
        exit 0
    fi
    
    # Generate client
    if generate_client; then
        echo "🎉 Frontend client generation complete!"
        echo "📁 Generated files in: $OUTPUT_DIR"
        echo "🔧 Import in your Vue components:"
        echo "   import { apiClient } from '@/services/generated/client-config'"
    else
        echo "❌ Client generation failed"
        exit 1
    fi
}

# Run main function with all arguments
main "$@"